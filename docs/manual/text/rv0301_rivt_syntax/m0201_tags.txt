 

----------------------------------- 

| Tags | Operations (optional parameters) | Notes | 

----------------------------------- 

| [r] | Run [r] os | description | ok | decimal script | expression | 
operator | limit | 

----------------------------------- 

| [i] | Insert [a] figure| table description function | variables model 
| variables text | variables read | variables write | variables | For 
format reference numbers see format operation. | 

----------------------------------- 

| [v] | Value[v] block title description | var = value | Values are 
defined in constants, typically with units | 

----------------------------------- 

| [e] | Equation [e] (equation description) #- format var = expression | 
For format reference numbers see formateq operation. | 

----------------------------------- 

| [t] | Table [a] format_number | table description range variables var 
= expression | Vectors or tables | 

----------------------------------- 

| [s] | Section[s] section heading (#- toc) | #- toc inserts a list of 
sections | 

----------------------------------- 

| #- nn | File #- fileop reference number (file description) | nn is a 2 
digit file operation ref number | 

----------------------------------- 

| #- page#- stop#. comment | #- page#- stop#. comment | #page inserts 
page break. #stop terminates processing. | 

----------------------------------- 

| [p] | Project data[p] (pdf size) | (background.pdf)keyword = data 
keyword = data 01_divisionfolder | (division title) model number | (pdf 
size) | (background1.pdf) keyword, format keyword, format model number | 
| | keyword, format 02_divisionfolder | Each model file is processed to 
a PDF if a PDF does not exist. | 

----------------------------------- 

| [f] | Project formats[n] format |[n] format | | Terminate each format 
with a blank line. | 

----------------------------------- 

| [k] | [k] keyword | x location | y location[k] keyword | x location | 
y location | 

----------------------------------- 

Table 4 . Operation summary 

7.Operations - syntax The calculation structure and equation formatting 
is controlled by on-c-e operation tags. reST directives and inline 
markup may be inserted between tags. The calc operations and associated 
tags are summarized in this section (also see Table 3 ). Operations that 
include printable content use bracket tags ([]). Operations that direct 
processes, i.e. formatting and file operations, use hash-dash tags (#-). 

single line: [s], [y], [t], #- nn multiline: [c], [a], [f], [e] 
Multiline operations terminate with a blank line. formatting: #- 
formateq and #- fileop project: [p], #- pformat 

File operations (#- file ) include the options w, r, i, t, e, f, o, s. 
The mnemonic syt caf write fos (sit caf, write FOSS) may help to 
remember tag options (FOSS is an acronym for free and open source 
software). 

reStructuredText (reST ) is used for formatting words, lists and tables 
in PDF files. Commonly used reST markup with additional requirements 
related to on-c-e, include: 

----------------------------------- 

| *word word* | Render italics | 

----------------------------------- 

| **word word** | Render bold | 

----------------------------------- 

| List heading - line 1 - line 2 | Bulleted lists must be indented at 
least 8 spaces from the left edge (two 4-space tabs). The list must also 
be indented relative to a list heading. | 

----------------------------------- 

| ======== =========Column1 Column2======== =========data 1 data 2data 3 
data 4======== ========= | Tables must be indented between 0 and 7 
spaces from left edge. | 

----------------------------------- 

| ..raw:: latex` \some{latex}` | Within a reST directive use a diacritic 
in the first column to specify the beginning and ending line break. 
Directives are not printed or processed for UTF calcs. | 

----------------------------------- 

Refer to online reST documentation for additional details. 

http://docutils.sourceforge.net/docs/user/rst/quickref.html 

Note: To avoid name collisions use subscript notation (i.e. D_1, D_2) 
for short variables names. To improve model readability, input within 
sections ([s]) should be indented (4 spaces is standard). 

[s] section description 

The section operation organizes the calculation . Formatted sections are 
labeled on the left with an incrementing section number and description, 
and on the right with the model number. Equation numbers are generated 
within sections as s . e where s is the section number and e restarts at 
1 in each new section. In PDF calcs, sections start new pages. Indent 
text and operations (4 spaces) within sections to improve model 
legibility (see Appendix A ). 

section description: single line heading 

[y] param | LaTeX, Python or sympy expression The symbolic operation 
formats a symbolic expression without evaluating and renders it in UTF 
and LaTeX form. Expressions may continue over multiple lines. param is 
one of: s: Sympy expression rendered in UTF and PDF calc p: Sympy 
expression rendered in UTF and PDF calc and to a file. x: LaTeX 
expression is rendered to PDF calc and to a file. 

where the automatically generated file name for the rendered equation 
image is latex[eqnumber].png. The p and x options require a LaTeX 
installation. 

[t] description | variable = expression The term operation is used to 
assign values to terms used in equations . It evaluates statements with 
constants. In a list of terms, put terms with vectors at the end for 
improved formatting. description: term description variable: any 
variable that meets Python naming conventionsexpression: math expression 
that uses constants 

#- nn (description) 

The file operation designation specifies the file processing and 
formatting definition number. See file operation for further details. 

nn: two digit integer that matches the reference number of a file 
definition operation description: brief file operation description 

[c] description | ok | decimal, decimal expression | operator | limit 
The check operation checks an expression against a limit for the 
specified operator. 

description: description of comparison ok: printed phrase if compare 
evaluates true; prepended by not if false: decimal: number of printed 
decimal places in equation and result (default 3, 3) expression: 
expression to evaluate typically a ratio operator: Python comparison 
operator (<, >, <=, >=, =) limit: value or expression that evaluates to 
set upper or lower limits 

[a] array description #- format refrange variable1 range variable2 (only 
for for 2D arrays ) var = expression; or array reference; or spreadsheet 
The array operation input has three different forms. 

1.The first form is similar to the equation operation but generates 1D 
or 2D tables with column and row labels. Range variables and expressions 
must be unitless. The program attempts to remove units before 
processing. If only one range variable or vector is provided a vector 
table (single row) is output. variable1: a unitless range statement or 
array variablevariable2: a unitless range statement or array variable 
for 2D tables.var = expression: unitless equation using Python syntax 

2.The second form is a Python list of lists which operates like a 
spreadsheet 

var =[ [header1, header2, header3 ], [ 1.1,2.2,_rc[1][0] + _rc[1][1]], 
[ 3.3,4.4, _rc[2][0] + _rc[2][1]],] 

Where: -any term in quotes is a string -the first row is composed of 
column header strings and is evaluated on the first pass. Do not include 
spaces around any operator symbols in headers. -any term not in quotes 
is a number or defined variable and is evaluated on the first pass -any 
term in quotes that also has one of + , - , * , / operators set off with 
spaces on each side is evaluated on the second pass after the numbers 
and variables have been evaluated. The prefix _rc is a built-in function 
that evaluates references to list elements using the row and column 
designation. 

3.The third form has a single array definition line: var = arary_var 
Where arary_var is a previously defined or imported array. 

[f] function description function_name(args) | var The function 
operation executes a function and assigns the return value to variable 
var. The function is imported from a Python file using the #- file 
operation and s option. Function doc strings are printed. Decimals are 
controlled by the function. var : one line description of 
functionfunction description : short description of function 
function_name(args): name of function and arguments to be executed 

[e] (description) #- format ref var = expression The equation operation 
evaluates a Python math statement with units and prints results with 
varying levels of detail as controlled by the #- format operation. See 
formatting operation. The expression may extend over more than one line. 

The description may be omitted and the equation started on the first 
line. The first line must include an = sign. If a format reference is 
not provided the first formatting ref in the list will be used as a 
default. 

description: optional equation description or building code reference 
format ref: two digit integer that references a formatting operation. 
var = expression: equation using Python syntax 

#- formateq | (default dec, default dec) | (pdf margin) format num 
|(dec, dec) | (units/row label)`| (prt code/col label) format num |(dec, 
dec) | (units/row label) | (prt code/col label) The formateq operation 
controls calc output type, printed detail, decimals, units and labels 
for equations and arrays . Use print detail code 0, 1 or 2 for equations 
that return vectors. 2D arrays do not use a print detail code. Set the 
command line option to noclean to retain the rst and other temporary 
files when generating a PDF file. See Appendix D. 

default decimal: number of printed decimal places in equation and result 
(default 3, 3) pdf margin: Bottom PDF page margin in inches. If 0 a UTF 
calc is output. format number: Unique five digit equation or array 
format number between 1 and 99999. Typically the first four digits are 
the model number and the fifth digit is the section number. This pattern 
facilities organization and guarantees uniqueness. deci, deci: override 
umber of printed decimal places in equation and result units/row label: 
unum unit for dependent variable or label for first variable print 
code/column label: For equations provide print code (default is 3) 
where: 0 - evaluate but do not print result 1 - print result 2 - print 
symbolic expansion and result 3 - print full result: symbolic expansion, 
substitution and result For arrays, provide column labels in place of 
print code. 

#page #stop # comment The hash tag is used for non-printing comments. A 
space is required between the hash and comment. The space is omitted 
when it is used for non-printing operations. 

#page inserts a page break in the PDF calc. #stop stops model processing 
at the point it is encountered. This can be useful for developing and 
debugging models. # comment inserts a non-printing commen 

#- fileop #- nn | option | (path)/filename | (v1) | (v2) | (v3) #- nn | 
option | (path)/filename | (v1) | (v2) | (v3) The fileop operation list 
processes external disk files using a single letter to specify 
processing procedure. Each operation has a designated two digit number 
which is used for reference in the model. Typically files must be 
located in the model folder and are specified by file name only. Full 
file paths are only used for the r and e options since the files these 
operations access may be located anywhere in the file system. This 
approach makes a model as portable as possible across different folder 
organizations. 

options #- nn: file operation designation number w: write values of a 
variable to CSV file. Overwrite existing files. w+ appends to file. r: 
read CSV file data into an array variable; full path required i: insert 
and process a comodel file t: add an external text file (boilerplate) to 
the output. e: edit lines of an existing text file and save an edited 
copy of the file; full path required 

f: insert an image from a file into the calc (jpg, png etc.) o: run an 
operating system script file. Typically runs a program. s: run a Python 
file (script) in model . Typically used to incorporate external 
functions . 

filename: file name used in disk operation. Full path required for |e| 
and |r|.v1-v3: variables specific to each file operation option. See 
details. 

w: write array values to file (uses v1, v2 and v3) Write contents of 
array v1 to the division file specified by the filename. Each line or 
row is written using the numpy.tofile method. To append data to an 
existing file use the option w+. v2 specifies the separation character 
(comma is default, for a space character use *).v3 is the data type 
(default is character format %s). 

r: read file data into variable (uses v1, v2 and v3) path/filename: 
os_path/filename 

Read CSV contents of path/filename into variable v1 and store as array 
using the numpy.genfromtext method. v2 specifies the separation 
character (comma is default, for space character use *). v3 specifies 
the number of lines to skip before reading the data (default is 0). 

i: insert and process a comodel file. Merge a comodel file from the 
project into the main model file. The comodel itself cannot include a 
comodel. Sections and equation numbers are integrated into the main 
model sequence. The comodel directory is determined by the program from 
the model number. v1-v3 not used. 

t: insert text file contents into output (uses v1) 

Insert the contents of the text file from the division folder into the 
model without processing. The v1 parameter optionally specifies the line 
range to be inserted as lines n1:n2 inclusive. 

e: edit text file (uses v1) path/filename: os_path/filename 

Edit an external file at run time. Lines immediately following the edit 
operation have the form: n | replacement text for line n 

where n is the line number to be replaced with the specified replacement 
text. The v1 parameter is appended to the file name before it is saved 
with edits i.e. if v1 is copy and the filename is file.tcl the edited 
file is saved as filecopy.tcl. 

Template variables may be used in the replacement line. A template 
variable is created by appending a % in front of the variable name used 
in the model. 

f: insert figure from file into calc (uses v1, v2 and v3) Insert figure 
(jpg, png etc.) from division file with caption v1. Figure labels are 
automatically added and incremented. v2 specifies the image width in 
percent of document width. The figure is centered and the aspect ratio 
is maintained. v3 specifies a side by side arrangement for a second 
consecutive figure using the keyword adjacent. For UTF -8 output the 
following text is inserted: Figure n: caption - file: filename 

o: run an operating system command or executable file 

The filename, accessible from the division folder, is the name of the 
executable file. v1-v3 not used. 

s: execute an external Python script in model namespace Execute an 
external Python script from the division folder. Methods (functions ) 
and variables will be processed in the model namespace. v1-v3 not used. 

Project operation code has not been released 

[p] (project default size) | (default background.pdf) (keyword = data) | 
(format _number) (keyword = data) | (keyword = data) | . . 
01(_divisionfolder) | (division title) 01yy.model .txt| size| 
background2.pdf keyword = data | keyword = data | | | 02 | (division 
title) 02yy.model .pdf| size| nobackground 03 | (division title) 
03yy.model .txt| size| background2.pdf keyword = -1| kewyword = -1| | | 
04 | (division title) 04yy.model .pdf| | omit | | | | 04yy.model .pdf| 
size | 05 | (division title) 

The project operation is specified in the project file and provides 
project calc information. Project files are located in the project 
folder which in turn contain division folders as subfolders. size: size 
and orientation settings of PDF pages. portrait_letter (default) 
landscape_letter landscape_tableau (11x17) portrait_A4 landscape_A4 

background.pdf: user file name for the calc background (default: none) 

keyword = data: keyword-data pairs to be added to the project 
dictionary. Any key word may be defined except for key words reserved 
for project calc printing. They include: ptitle, pname, padd1, padd2, 
pstate, pzip, powner, pnumber, eng, date, rev, stamp1, stamp2 

xx(_divisionfolder): by default include calcs from this folder in the 
project calcs. If _divisionfolder is provided as part of the folder name 
it is used for the division name in the project calcs (i.e. table of 
contents). If division title is provided it is used instead. 

For each model in the folder, if a PDF calc is available, it is used. 
Otherwise the model is run to produce the PDF calc. 

Project settings may be overridden for a specified calc or model. If 
default background.pdf is set, then set the value to nobackground to 
suppress the default template and all keywords for a particular calc. To 
omit a calc from the project set use omit for the template value. A 
keyword data may be redefined for a specific calc. To suppress writing 
the keyword value to a calc set its value to -1. To write only keyword 
data without a template specify the keyword data on the keyword override 
line. 

The project or division folder may also include the file once.sty which 
defines the LaTeX PDF style settings, and the unitc.py file which 
defines calc units. They will override the default settings in the 
oncepy package directory division folder files override project folder 
files. 

[n] format_number keyword | x location | y location keyword | x location 
| y location keyword | x location | y location .. 

The project format operation describes the print location on a calc 
sheet of keyword data defined in the project operation. Terminate format 
number definitions with a blank line. 

keyword: project keyword x location: x location of keyword value on page 
in points from upper left corner. y location: y location of keyword 
value on page in points from upper left corner. 

