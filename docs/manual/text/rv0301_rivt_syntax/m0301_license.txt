 Appendix I Licenses 

oncepy, onceutf and on-c-e Komodo tools are distributed under the MIT or 
compatible license. Copyright is retained by the code author. 

Figure 19 . http://opensource.org/licenses/MIT 

Figure 20 . http://creativecommons.org/publicdomain/zero/1.0/ Template 
files uploaded to once-db are made available to others under the CCO 1.0 
Public Domain Dedication. A Komodo snippet is provided for inserting 
license text in a template file: 

# This file contains a on-c-e public domain template (the template). # 
The template is distributed under the CCO 1.0 Public Domain Dedication 
# at http://creativecommons.org/publicdomain/zero/1.0/ # The template is 
not a structural design calculation. # The template user assumes sole 
responsibility for all inputs and results. If the license is in the 
template the following license is added to the calc. 

This document (the calc) is generated from a on-c-e public domain 
template. The calc is licensed under the CCO 1.0 Public Domain 
Dedication at http://creativecommons.org/publicdomain/zero/1.0/ The calc 
is not a structural design calculation. The calc user assumes sole 
responsibility for all inputs and results. 

Appendix J Security and Namespaces 

on-c-e is designed to be a flexible and efficient tool for structural 
analysis and design. It is also designed to facilitate program 
verification by keeping the source code simple and transparent. on-c-e 
includes about 2000 lines of source code organized in less than a dozen 
modules and built on the large scientific library collection. 
Programming tradeoffs occur in pursuing these objectives. 

The programs use Python exec and eval statements because they are most 
straightforward way to process the model operations. It is possible to 
send intentionally malicious input to exec and eval. This risk is 
controlled or eliminated with relatively little effort on the part of 
the user. Sensible model file input is obvious and constrained. It is 
under the control of engineers and designers who are running the models 
and can recognize appropriate input, in the form of structural analysis 
equations, arrays and functions. the engineers using the tool. Because 
unsafe code in the model would appear very different from this well 
understood structural text it is straightforward to spot and delete 
suspicious or problematic model code before running. In the future 
additional security checks may be added to the program but the only way 
to ensure proper operation of the program is to check the input. 

The programs also import numpy, sympy and other libraries in their 
entirety into the model namespace. This approach improves readability 
and streamlines equation input but can introduce variable name 
collisions. Variable naming rules have been developed and more will be 
added as experience is gained and the program matures. 

In summary, to make on-c-e more readable, useful and flexible, the 
design philosophy chosen emphasizes code simplicity and transparency and 
relies on the experience of the user to recognize appropriate input. 
Verbose and restrictive input policies were avoided. 

