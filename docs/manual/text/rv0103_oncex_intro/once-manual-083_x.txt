


Figure 8
. Primary inputs and outputs


-----------------------------------
| Project Files | Project / Calc Folder Structure | Calc Files |
-----------------------------------
| ddmm.input.txtinput |
-----------------------------------
|  (project.txt) Project file |
-----------------------------------
| (background.pdf) Calc background | (once.sty)PDF style |
-----------------------------------
| ddmm.name.calc.txtUTF-8 calc |
-----------------------------------
| (ddmm.name.calc.pdf)PDF calc  |
-----------------------------------
| (project.pdf)Project calc | equations.pyPython equation file |
-----------------------------------
| (project.log.txt)Project execution log | _calclog.txtCalc execution log |
-----------------------------------
| Notes:1. Input files are in blue; output in green2. Optional files are in parenthesis     |
-----------------------------------
Table 3
. File and folder structure


6.Operations - overview 
There are six on-c-e markup tags used to produce calcs: 

[r]ublish  
[i]ection  
[v]erm 
[e]quation
 [t]rray
[s]rray 
Tags are processed in the order entered. During processing, sections and equations are automatically numbered and formatted. Equations are rendered both symbolically and with numerical substitution, similar to a hand calculation. 1D and 2D tables are generated from equations, imported data and spreadsheet-like formats. Units and decimals are controlled at the equation level by format statements positioned at the end of the calc input to improve readability. Table 3
 and Sec
tion 7 provide further details.

A bracketed tag ([]) specifies printable content.  Hash-dash tags (#-) tags specify formatting and file processing operations. Operations may occur in any order, without nesting, as long as each variable or parameter was previously defined.  Operation parameters are separated by vertical bars (|). Default parameters may be omitted but the bar delimiters (with at least one space between) must be provided.  Tags include [s], [y], [t] (single line operations) and [c], [a], [f], [e] (multiple line operations terminated with a blank line). 

Tables (arrays) can be manually configured like a spreadsheet or generated using equations and range variables. If variables with units are used in a generated array they are stripped before evaluation.

The file operation tag #- nn designates a file operation definition number that includes the options b, r, o, w, n, i, e, s.  For example, the option parameter |s| processes a Python file or script that defines function imported into defines functions available to the model.  A loaded function is processed in the model by the function tag [f].  The option |i| imports a comodel into the main model. A comodel is an imported model that co-executes with the main model, but does not itself import other models (only one level of model import is permitted).  Other options import figures and text and execute read, write, edit and run operations on external files and program (PDF calcs insert figures; UTF calcs insert references)  

Any text in the model
 not associated with an operation tag is passed through to the output unchanged. reStructuredText
 (reST
) markup is retained and used when processing PDF calcs. For example, surrounding text with **double asterisks** will print bold, *single asterisks* will print italics and a vertical bar at the beginning of a line will force a new line.  reST directives, i.e. raw latex, are also processed by PDF calcs but not echoed in UTF calcs.  See the reST reference
 for further documentation.   

Project operations use tags [p] ,  [n]
.  Project calcs are grouped sets of numbered PDF calcs with a title page, table of contents, title blocks and navigational links. The [p] operation writes a project
 calc
 with the name project_file_name.pdf to the project folder, overwriting any existing file. The project operation is divided into a project data definition section and a calc folder inclusion list (Table 4 and Appendix B
).  Project defaults can be overridden in each calc.  Project data is defined by a dictionary of keyword-data pairs.  The project format
 operation [n] defines the page print location for specific project data. 



-----------------------------------
| Tags | Operations (optional parameters) | Notes |
-----------------------------------
| [r] | Run [r] os | description | ok | decimal    script | expression | operator | limit |
-----------------------------------
| [i] | Insert [a] figure| table description    function | variables    model | variables    text | variables    read | variables    write | variables | For format reference numbers see format operation.  |
-----------------------------------
| [v] | Value[v] block title    description | var = value | Values are defined in constants, typically with units  |
-----------------------------------
| [e]  | Equation [e] (equation description) #- format     var = expression | For format reference numbers see formateq operation. |
-----------------------------------
| [t]  | Table [a] format_number | table description    range variables    var = expression | Vectors or tables |
-----------------------------------
| [s] | Section[s] section heading (#- toc) | #- toc inserts a list of sections |
-----------------------------------
| #- nn | File #- fileop reference number (file description) | nn is a 2 digit file operation ref number |
-----------------------------------
| #- page#- stop#. comment | #- page#- stop#. comment | #page inserts page break. #stop terminates processing. |
-----------------------------------
| [p] | Project data[p] (pdf size) | (background.pdf)keyword = data keyword = data 01_divisionfolder | (division title)  model number | (pdf size) | (background1.pdf)    keyword, format    keyword, format   model number |  |   |     keyword, format 02_divisionfolder   | Each model file is processed to a PDF if a PDF does not exist. |
-----------------------------------
| [f] | Project formats[n] format |[n] format | | Terminate each format with a blank line. |
-----------------------------------
| [k] | [k] keyword | x location | y location[k] keyword | x location | y location |
-----------------------------------
Table 4
. Operation summary




7.Operations - syntax
The calculation structure and equation formatting is controlled by on-c-e operation tags. reST directives and inline markup may be inserted between tags.  The calc operations and associated tags are summarized in this section (also see Table 3
). Operations that include printable content use bracket tags ([]).  Operations that direct processes, i.e. formatting and file operations, use hash-dash tags (#-).  

single line: [s], [y], [t],  #- nn 
multiline: [c], [a], [f], [e] Multiline operations terminate with a blank line.  
formatting: #- formateq and #- fileop
 
project: [p],  #- pformat  

File operations (#- file
) include the options w, r, i, t, e, f, o, s.  The mnemonic syt caf write fos (sit caf, write FOSS) may help to remember tag options (FOSS is an acronym for free and open source software).

reStructuredText
 (reST
) is used for formatting words, lists and tables in PDF files.  Commonly used reST markup with additional requirements related to on-c-e, include:


-----------------------------------
| *word word* | Render italics |
-----------------------------------
| **word word** | Render bold |
-----------------------------------
| List heading   - line 1   - line 2 | Bulleted lists must be indented at least 8 spaces from the left edge (two 4-space tabs). The list must also be indented relative to a list heading.  |
-----------------------------------
| ========  =========Column1   Column2========  =========data 1    data 2data 3    data 4========  ========= | Tables must be indented between 0 and 7 spaces from left edge. |
-----------------------------------
| ..raw:: latex`  \some{latex}` | Within a reST directive use a diacritic in the first column to specify the beginning and ending line break.  Directives are not printed or processed for UTF calcs. |
-----------------------------------
Refer to online reST
 documentation for additional details. 

http://docutils.sourceforge.net/docs/user/rst/quickref.html

Note: To avoid name collisions use subscript notation (i.e. D_1, D_2) for short variables names. To improve model readability, input within sections ([s]) should be indented (4 spaces is standard).


[s] section description

The section operation organizes the calculation
. Formatted sections are labeled on the left with an incrementing section number and description, and on the right with the model number.  Equation numbers are generated within sections
 as s . e where s is the section number and e restarts at 1 in each new section. In PDF calcs, sections start new pages. Indent text and operations (4 spaces) within sections to improve model legibility (see Appendix A
).

section description: single line heading 


[y] param | LaTeX, Python or sympy expression  
The symbolic operation formats a symbolic expression without evaluating and renders it in UTF and LaTeX form. Expressions may continue over multiple lines.  param is one of:
 
s: Sympy expression rendered in UTF and PDF calc
p: Sympy expression rendered in UTF and PDF calc and to a file.
x: LaTeX expression is rendered to PDF calc and to a file.

where the automatically generated file name for the rendered equation image is latex[eqnumber].png.  The p and x options require a LaTeX installation.


[t] description | variable = expression
The term operation is used to assign values to terms
 used in equations
.  It evaluates statements with constants.  In a list of terms, put terms with vectors at the end for improved formatting.
  
description: term description
variable: any variable that meets Python naming conventionsexpression: math expression that uses constants


#- nn (description)  

The file operation designation specifies the file processing and formatting definition number.  See file operation 
 for further details. 

nn: two digit integer that matches the reference number of a file definition operation 
description: brief file operation description 


[c] description | ok  | decimal, decimal
expression | operator | limit 
The check operation checks an expression against a limit for the specified operator.

description: description of comparison
ok: printed phrase if compare evaluates true; prepended by not if false: 
decimal: number of printed decimal places in equation and result (default 3, 3)
expression: expression to evaluate  typically a ratio 
operator: Python
 comparison operator (<, >, <=, >=, =)
limit: value or expression that evaluates to set upper or lower limits

[a]  array description #- format
 refrange variable1 
range variable2 (only for for 2D arrays
)
var = expression; or array reference; or spreadsheet
The array operation input has three different forms. 

1.The first form is similar to the equation operation but generates 1D or 2D tables with column and row labels.  Range variables and expressions must be unitless.  The program attempts to remove units before processing.  If only one range variable or vector is provided a vector table (single row) is output.  
variable1: a unitless range statement or array variablevariable2: a unitless range statement or array variable for 2D tables.var = expression: unitless equation using Python
 syntax

2.The second form is a Python list of lists which operates like a spreadsheet 

var =[
[header1,   header2, header3    ],
[ 1.1,2.2,_rc[1][0] + _rc[1][1]],
[ 3.3,4.4, _rc[2][0] + _rc[2][1]],]

Where:
-any term in quotes is a string 
-the first row is composed of column header strings and is evaluated on the first pass.  Do not include spaces around any operator symbols in headers.
-any term not in quotes is a number or defined variable and is evaluated on the first pass
-any term in quotes that also has one of  + , -  ,  *  ,  /  operators set off with spaces on each side is evaluated on the second pass after the numbers and variables have been evaluated. The prefix _rc is a built-in function that evaluates references to list elements using the row and column designation. 

3.The third form has a single array definition line: var = arary_var 
Where arary_var is a previously defined or imported array.



[f] function description
     function_name(args) | var 
The function operation executes a function and assigns the return value to variable var. The function is imported from a Python file using the #- file operation and s option.   Function doc strings are printed.  Decimals are controlled by the function.
 
var : one line description of functionfunction description : short description of function
function_name(args): name of function and arguments to be executed


[e] (description) #- format
 ref     var = expression
The equation operation evaluates a Python
 math statement with units and prints results with varying levels of detail as controlled by the #- format operation. See formatting operation. The expression may extend over more than one line. 

The description may be omitted and the equation started on the first line.  The first line must include an = sign.  If a format reference is not provided the first formatting ref in the list will be used as a default.  

description: optional equation description or building code reference
format
 ref: two digit integer that references a formatting operation. 
var = expression:  equation using Python
 syntax


#- formateq
  | (default dec, default dec) | (pdf margin) 
format
 num |(dec, dec) | (units/row label)`| (prt code/col label)          format num |(dec, dec) | (units/row label) | (prt code/col label)
The formateq
 operation controls calc output type, printed detail, decimals, units and labels for equations
 and arrays
.   Use print detail code 0, 1 or 2 for equations that return vectors.  2D arrays do not use a print detail code.  Set the command line option to noclean to retain the rst and other temporary files when generating a PDF file.  See Appendix D.

default decimal: number of printed decimal places in equation and result (default 3, 3)
pdf margin: Bottom PDF page margin in inches. If 0 a UTF calc is output.  
format number: Unique five digit equation or array format
 number between 1 and 99999.  Typically the first four digits are the model
 number and the fifth digit is the section number.  This pattern facilities organization and guarantees uniqueness.
deci, deci: override umber of printed decimal places in equation and result
units/row label: unum unit for dependent variable or label for first variable
print code/column label: For equations
 provide print code (default is 3) where:
0 - evaluate but do not print result
1 - print result 
2 - print symbolic expansion and result
3 - print full result:  symbolic expansion, substitution and result
For arrays, provide column labels in place of print code.
  



#page
#stop
# comment
The hash tag is used for non-printing comments.  A space is required between the hash and comment. The space is omitted when it is used for non-printing operations. 

#page inserts a page break in the PDF calc.  
#stop stops model processing at the point it is encountered. This can be useful for developing and debugging models.  
# comment inserts a non-printing commen

#- fileop   
#- nn | option | (path)/filename | (v1) | (v2) | (v3)
#- nn | option | (path)/filename | (v1) | (v2) | (v3)
The fileop operation list processes external disk files using a single letter to specify processing procedure. Each operation has a designated two digit number which is used for reference in the model. Typically files must be located in the model
 folder and are specified by file name only.  Full file paths are only used for the r and e options since the files these operations access may be located anywhere in the file system. This approach makes a model as portable as possible across different folder organizations. 


options
#- nn: file operation designation number
w: write values of a variable to CSV file. Overwrite existing files.  w+ appends to file.
r: read CSV file data into an array variable; full path required
i: insert and process a comodel
 file 
t: add an external text file (boilerplate) to the output. 
e: edit lines of an existing text file and save an edited copy of the file; full path required

f: insert an image from a file into the calc
 (jpg, png etc.)
o: run an operating system script file. Typically runs a program.
s: run a Python
 file (script) in model
.  Typically used to incorporate external functions
.

filename: file
 name used in disk operation. Full path required for |e| and |r|.v1-v3: variables specific to each file operation option. See details.

w: write array values to file (uses v1, v2 and v3)
Write contents of array v1 to the division file specified by the filename. Each line or row is written using the numpy.tofile method. To append data to an existing file use the option w+.  v2 specifies the separation character (comma is default, for a space character use *).v3 is the data type (default is character format
 %s).

r: read file data into variable (uses v1, v2 and v3)
path/filename: os_path/filename

Read CSV contents of path/filename into variable v1 and store as array using the numpy.genfromtext method.  v2 specifies the separation character (comma is default, for space character use *). v3 specifies the number of lines to skip before reading the data (default is 0).

i: insert and process a comodel
 file.  
 
Merge a comodel
 file from the project into the main model file.  The comodel itself cannot include a comodel.  Sections and equation numbers are integrated into the main model sequence.  The comodel directory is determined by the program from the model number.  v1-v3 not used. 




t: insert text file contents into output (uses v1)

Insert the contents of the text file from the division folder into the model without processing. The v1 parameter optionally specifies the line range to be inserted as lines n1:n2 inclusive. 

e: edit text file (uses v1)
path/filename: os_path/filename

Edit an external file at run time. Lines immediately following the edit operation have the form:
 
n | replacement text for line n

where n is the line number to be replaced with the specified replacement text. The v1 parameter is appended to the file name before it is saved with edits i.e. if v1 is copy and the filename is file.tcl the edited file is saved as filecopy.tcl. 

Template variables may be used in the replacement line.  A template
 variable is created by appending a % in front of the variable name used in the model.  

f: insert figure from file into calc
 (uses v1, v2 and v3)
Insert figure (jpg, png etc.) from division file with caption v1. Figure labels are automatically added and incremented. v2 specifies the image width in percent of document width.  The figure is centered and the aspect ratio is maintained.   v3 specifies a side by side arrangement for a second consecutive figure using the keyword adjacent. For UTF
-8
 output the following text is inserted:  Figure n:  caption - file: filename 

o: run an operating system command or executable file

The filename, accessible from the division folder, is the name of the executable file.  v1-v3 not used. 

s: execute an external Python
 script in model
 namespace
Execute an external Python script from the division folder. Methods (functions
) and variables will be processed in the model namespace. v1-v3 not used. 


Project operation code has not been released

[p] (project
 default size) | (default background.pdf)
(keyword = data) | (format
_number) 
(keyword = data) |
(keyword = data) |
.
.
01(_divisionfolder) | (division title)
01yy.model
.txt| size| background2.pdf 
keyword = data | keyword = data | | |
02 | (division title)
02yy.model
.pdf| size| nobackground
03 | (division title)
03yy.model
.txt| size| background2.pdf 
keyword = -1| kewyword = -1|  | |
04 | (division title)
04yy.model
.pdf| | omit
| | | |
04yy.model
.pdf| size | 
05 | (division title)

The project
 operation is specified in the project file and provides project calc
 information. Project files are located in the project folder which in turn contain division folders as subfolders.  
size: size and orientation settings of PDF pages.  
portrait_letter (default)
landscape_letter
landscape_tableau (11x17)
portrait_A4
landscape_A4 

background.pdf: user file name for the calc
 background (default: none) 

keyword = data: keyword-data pairs to be added to the project
 dictionary.  Any key word may be defined except for key words reserved for project calc
 printing.  They include:
ptitle, pname, padd1, padd2, pstate, pzip, powner, pnumber, eng, date, rev, stamp1, stamp2


xx(_divisionfolder): by default include calcs from this folder in the project
 calcs.  If _divisionfolder is provided as part of the folder name it is used for the division name in the project calcs (i.e. table of contents).  If division title is provided it is used instead.

For each model in the folder, if a PDF calc
 is available, it is used.  Otherwise the model is run to produce the PDF calc. 

Project settings may be overridden for a specified calc
 or model.   If default background.pdf is set, then set the value to nobackground to suppress the default template
 and all keywords for a particular calc.  To omit a calc from the project
 set use omit for the template value. A keyword data may be redefined for a specific calc.  To suppress writing the keyword value to a calc set its value to -1.  To write only keyword data without a template specify the keyword data on the keyword override line. 

The project
 or division folder may also include the file once.sty which defines the LaTeX
 PDF style settings, and the unitc.py file which defines calc
 units.  They will override the default settings in the oncepy package directory  division folder files override project folder files. 


[n]  format_number
keyword | x location | y location
keyword | x location | y location
keyword | x location | y location
..

The project
 format
 operation describes the print location on a calc
 sheet of keyword data defined in the project operation.  Terminate format number definitions with a blank line.

keyword: project
 keyword
x location: x location of keyword value on page in points from upper left corner. 
y location: y location of keyword value on page in points from upper left corner.


8. Databases
 
Calcs and projects can be organized and shared as zipped files or in searchable databases.  Because calc inputs are text it is relatively straightforward to build searchable databases for sharing and re-use.  on-c-e currently implements two types of databases (Figure 9).  The first type is structured for web browsing and sharing and the second is designed for local use within an office or project.

A web-accessible database that uses mongoDB with the schema shown in Figure 4 is available here
 and is further discussed in Appendix B.  The database and interface is useful for browsing complete calcs and their inputs.   

SQLite is used for local database storage. The schema for the local database is similar to the cloud but omits the records that are intended for online viewing and browsing.  A convenience script, calcsqlite.py, adds calc input to the local SQLite database.  It can be invoked from the command line in the folder containing the calc or through a tool bar button in Komodo.  It has the form

python m    calcsqlite_database_path       calc_file_designation      [-c contactinfo z zipfile]

where the terms in parenthesis add the specified information to the database and are optional.  Date and equation summary records are added automatically.




SQLite   mongoDB


9. Resources

 
 Share models
Download
  Models http://on-c-e.org

Upload
 Modelshttp://on-c-e.org/upload-model

 
 
Run locally
Download
 and install
 Anaconda 1.9.2.  Using pip, install Unum, tabulate and PyPDF2.  Install Tex Live 2014. Download and install Pyzo and Komodo
 Edit (see Section 2 and Appendices D and F).  


Although any text editor is adequate for composing and running models, the most effective editor is an interactive development environment (IDE
).  It provides project
, file management and font management, code navigation, templates, custom toolbars and macros, syntax coloring, window layout controls and remote file access. Komodo
 Edit
 is a full-featured, cleanly designed, open source IDE which can manage Python
, TCL, Ruby and other programing languages applicable to on-c-e and other structural engineering work. A number of on-c-e
 specific tools and convenience macros are provided for Komodo (Appendix C
).  Although Komodo is discussed in this manual, other IDEs or text editors may be used.  
Commercial support
 for installing and running the program is available on an annual basis at StructureLabs
.  It includes phone support and a private oncepy installation on a Webfaction
 server that is accessed over SSH and SFTP and will be used for interactive support. 


Find 
Abouton-c-e
.org
User manualhttp://on-c-e.info

onceutf.py
 http://on-c-e.info
oncepyhttp://on-c-e.org/programs/
model
 databasehttp://
on-c-e.org/Code and docshttp://on-c-e.github.io/
Road maphttp://on-c-e.us/

Komodo
 Edithttp://activestate.com/komodo-edit
DejaVu
 Fonts
http://dejavu-fonts
.org/wiki/Main_Page
Workstation (Anaconda 1.9.2)http://repo.continuum.io/archive/index.html
Web Platform (Wakari)https://wakari.io/
Pyzo
http://www.pyzo.org/index.html
TeX Livehttps://www.tug.org/texlive/
 
10.Diagrams
 

Diagrams
 are incorporated into on-c-e PDF calcs as bitmaps (png, jpg etc.) using the figure option |f| of the file operation #- file.  Structural diagrams
 are often drawn to scale and can be efficiently reused when described in vector and parametric form that is exported as a bitmap.  

2D
The Open Source Dia Diagram Editor

 may be used to interactively create and edit vector diagrams.   

It writes SVG and DXF, the two common scalable vector file formats for 2D diagrams
. Parameterized diagrams can be created in both formats using Python scripts and the svgwrite, dxfwrite and ezdxf libraries. Custom shapes for structural engineering can be added to its library.  The freely available vector drawing program DraftSight
 may also be used to produce SVG, DXF and bitmapped drawings. 

3D
3D diagrams
 can be created using SketchUp
 or SketchUp Make 
 (skp format), or the Open Source FreeCAD

 (variety of formats).  Drawing files can be exchanged between the two programs using the COLLADA dae format.  The Python pycollada library is required for FreeCAD translation (use pip install pycollada).

Diagram files (svg, dxf, skp, dae) prepared for on-c-e templates may be uploaded to a separate field in once-db
 or included in a template zip folder.




Figure 10
. Dia screenshot
11.   SymPy, reST, 
 and LaTeX

 
on-c-e 

 incorporates LaTeX into calcs through the SymPy and reST libraries.  Since most of the LaTeX formating operations for equations are built into the program, LaTeX only needs to be written in on-c-e calcs when it is convenient for explanatory purposes or specific formatting.  LaTeX
 equations are available from a number of sources including Wikipedia articles (use show source in browser) and online libraries i.e.
http://www.equationsheet.com/
http://latexsearch.com/

They can be pasted into models and rendered using the [y] symbolic operation.
Texmaker
 is useful tool for learning and practicing LaTeX. It is a free, modern, cross-platform LaTeX
 editor for Linux, OSX and Windows systems that integrates tools needed to develop documents with LaTeX, in one application. Texmakerincludes Unicode support, spell checking, auto-completion, code folding and a built-in pdf viewer with syntax support and continuous view mode. Texmakereasy to use and to configure and is released under the GPL license.  The integrated, interactive, interface includes three panes. The left pane shows the document structure, the central pane contains the document template and contents, and the right pane shows the generated pdf.  






Appendix A -   Write a UTF calc using Pyzo

IEP
 : Interactive Editor for Python
 is a self-contained interactive interface for running Python programs on a workstation. It is installed as part of the Pyzo

 science and engineering distribution (based on Python 3). Pyzo can be installed in any folder without administration rights and does not affect existing Python installations.  If you want to install a limited Python science platform this is a good placed to start. For a full installation Anaconda (see Appendix D) and Komodo Edit are recommended.  A large set of convenience macros have been written for Komodo (see Appendix C
 ).  See Section 4
 to try on-c-e without installation.

The IEP interface consists of four panes that contain various tools arranged by the user. The upper left pane (Figure 3) is an interactive IPython shell and the lower left pane is a code editor.  When code is run the results are executed and displayed in the shell where they can be interactively explored. As code is typed in the shell or editor, the upper right pane automatically displays code help if the help tab is selected.  Other tools display workspace variables and code structure. The lower right pane is a file browser.   

1.Download onceutf.py and example templates from http://on-c-e.info
.  Copy onceutf.py to pyzo/Lib/site-packages/ and the examples to any folder with write privileges. 
2.Open the calc input and calc by double clicking on the files in the file browser.  Edit the model and re-run it by scrolling to the run command entered in the shell.  Variable values are stored in the shell. Equations can be copied from the calc to the shell for interactive evaluation.
3.Open the calc input and calc by double clicking on the files in the file browser.  Edit the model and re-run it by scrolling to the run command entered in the shell.  Variable values are stored in the shell. Equations can be copied from the calc to the shell for interactive evaluation.
4.Run conda or pip from the shell or Scripts folder to install additional packages without affecting other Python installations.  The basic Pyzo works with onceutf. 




Appendix B -   Add a template to calc-db
This section describes the simplest approach to adding a template
 to the database calc-db. The purpose of the exercise is to gain an initial familiarity with the process.  
We will use the template 0101.basic.txt and modify it to make a new template. Everything is done in a browser  no installation is needed.
Step 1.  Go to http://on-c-e.org
.  Click on   [Download Model Templates]  
  at the top of the page.
Step 2.  Scroll down to search once-db, click on the description dropdown box and select contains.  Enter the search term basic template.  Click on the Search button.  One or more results should appear at the bottom of the page.  If you search only on example you will see a number of templates.
Step 3.  Look for the template
 name 0101.basic.txt and the associated calc
 names cal0101.basic.txt and cal0101.basic.pdf. Click on the links that begin with cal to view the two different calc formats in a browser window.  
Step 4.  Select the window for cal0101.basic.txt. Press the keys CTRL-A or select all of the template text by dragging the mouse.  Press CTRL-C or right click in the browser window and select copy to copy the text to the clipboard.
Step 5.  Click on   [Upload Model Templates]  
 at the top of the page.  Scroll down to the box labeled Template Text and enlarge it by left clicking on the handle in the lower right corner and dragging it.  Click in the box and press CTRL-V or right click and select paste.  You should now have a copy of the template
 in the box.
 
 
Edit Template
Step 6.  Edit the text, terms, and equations.  Leave the tags and vertical bars in place and edit the text between them. Section 6 provides an overview of tags and Appendix B describes tag syntax.  
When you finish editing the template, type a brief template summary in the Template Summary Description box above. Include the phrase learning template in the description. Delete all of the words  example  from the template and description (so it doesnt show up in a search).  The learning templates will be removed from the database every few days.
UploadTemplate
Step 7.  Click on the   Submit   button. You will receive a confirmation message that the template
 was submitted.

Thats it!  Thanks for learning how to contribute.
(note: typically the template file will be prepared on your computer and upload


Appendix C -   Write a calc in the cloud
This section describes a basic approach to running an example template when a Python platform is not available. It uses a web platform that does not require program installation.  
on-c-e
 is designed to run on workstations with Python
 installed, but it can also run in the cloud on Python web platforms like Wakari
 and PythonAnywhere
.  They provide an in-browser editor and shell terminal interface.  Wakari and PythonAnywhere are discussed in the manual but other Python web platforms can be used.  Appendix E provides additional details for web execution.  Appendix D discusses installation of the program on a computer or mobile device. 
For this exercise a simple example model is run on a Python web platform using the program onceutfnnn.py.  You can 
preview and download other models at http://on-c-e.org
.  Printed example models and calc
 output are provided in Appendix I. onceutf.py is a single file subset of on-c-e that does not include project
 options, PDF calcs, or unit overrides.   It was written to simplify program testing and implementation on web and mobile platforms.  
 
Run template
 
1.Sign up for a free Wakari
 account at http://continuum.io/
       or PythonAnywhere
 at  https://www.pythonanywhere.com/

2.Download
 onceutfnnn.py and 0101.basic.txt or 0101.basic
.txt
 from  http://on-c-e.info

3.Upload
 the program and template
 files to a folder on your Wakari
 or PythonAnywhere
 account.  Choose a bash shell terminal from the drop-down list and open it (Appendix E).  At the shell command line check that both files are in the folder you selected (type ls or dir).  Enter the command 
python  onceutfnnn.py  0101.basic.txt  -e

       where nnn  is the program version number (i.e. 040). 

Processing a calc input will write several files to the directory (Table 2) and echo the log file and calc output, cal0101.basic.txt, to the screen.  You can open the calc outptu using the browser editor provided by the web platform.  The switches following the model name echo the calc to the console (e) or browser (b).  The browser option works when run on local computer.
Congratulations on running your first model!

(note: refer to Appendix D for on-c-e
 installation instructions on a computer

onceutf.py runs on Python web platforms.  Wakari and PythonAnywhere are discussed.

Wakari
 is a Python
-Linux
 web platform that runs in the browser.  Upload
 onceutfnnn.py and mode.01.txt to your Wakari account.  Open a bash shell window (not Ipython) and type 
python onceutfnnn.py 0101.simple.txt c

at the command prompt, where nnn is the version number (i.e. 040).  The program will output a model
 summary followed by the calc
 output (the c option echoes the output to stdout; use b to echo output to the browser when using the program locally). Use the browser file editor to review and modify the files.  





